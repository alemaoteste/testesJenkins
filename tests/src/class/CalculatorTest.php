<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-25 at 16:10:02.
 */
class CalculatorTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Calculator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Calculator;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * Generated from @assert (0, 0) == 0.
     *
     * @covers Calculator::add
     */
    public function testAdd()
    {
        $this->assertEquals(
                0, $this->object->add(0, 0)
        );
    }

    /**
     * Generated from @assert (0, 1) == 1.
     *
     * @covers Calculator::add
     */
    public function testAdd2()
    {
        $this->assertEquals(
                1, $this->object->add(0, 1)
        );
    }

    /**
     * Generated from @assert (1, 0) == 1.
     *
     * @covers Calculator::add
     */
    public function testAdd3()
    {
        $this->assertEquals(
                1, $this->object->add(1, 0)
        );
    }

    /**
     * Generated from @assert (1, 1) == 2.
     *
     * @covers Calculator::add
     */
    public function testAdd4()
    {
        $this->assertEquals(
                2, $this->object->add(1, 1)
        );
    }

    /**
     * Generated from @assert (0, 0) == 0.
     *
     * @covers Calculator::sub
     */
    public function testSub()
    {
        $this->assertEquals(
                0, $this->object->sub(0, 0)
        );
    }

    /**
     * Generated from @assert (0, 1) == -1.
     *
     * @covers Calculator::sub
     */
    public function testSub2()
    {
        $this->assertEquals(
                -1, $this->object->sub(0, 1)
        );
    }

    /**
     * Generated from @assert (1, 0) == 1.
     *
     * @covers Calculator::sub
     */
    public function testSub3()
    {
        $this->assertEquals(
                1, $this->object->sub(1, 0)
        );
    }

    /**
     * Generated from @assert (1, 1) == 0.
     *
     * @covers Calculator::sub
     */
    public function testSub4()
    {
        $this->assertEquals(
                0, $this->object->sub(1, 1)
        );
    }

    /**
     * Generated from @assert (0, 0) == 0.
     *
     * @covers Calculator::mult
     */
    public function testMult()
    {
        $this->assertEquals(
                0, $this->object->mult(0, 0)
        );
    }

    /**
     * Generated from @assert (0, 1) == 0.
     *
     * @covers Calculator::mult
     */
    public function testMult2()
    {
        $this->assertEquals(
                0, $this->object->mult(0, 1)
        );
    }

    /**
     * Generated from @assert (1, 0) == 0.
     *
     * @covers Calculator::mult
     */
    public function testMult3()
    {
        $this->assertEquals(
                0, $this->object->mult(1, 0)
        );
    }

    /**
     * Generated from @assert (1, 1) == 1.
     *
     * @covers Calculator::mult
     */
    public function testMult4()
    {
        $this->assertEquals(
                1, $this->object->mult(1, 1)
        );
    }

    /**
     * Generated from @assert (1, 1) == 1.
     *
     * @covers Calculator::div
     */
    public function testDiv()
    {
        $this->assertEquals(
                1, $this->object->div(1, 1)
        );
    }

    /**
     * Generated from @assert (1, 2) == 0.5.
     *
     * @covers Calculator::div
     */
    public function testDiv2()
    {
        $this->assertEquals(
                0.5, $this->object->div(1, 2)
        );
    }

    /**
     * Generated from @assert (2, 2) == 1.
     *
     * @covers Calculator::div
     */
    public function testDiv3()
    {
        $this->assertEquals(
                1, $this->object->div(2, 2)
        );
    }

    /**
     * Generated from @assert (10, 2) == 5.
     *
     * @covers Calculator::div
     */
    public function testDiv4()
    {
        $this->assertEquals(
                5, $this->object->div(10, 2)
        );
    }

}
